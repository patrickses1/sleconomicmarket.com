import express from 'express';
if (payment_method === 'mobile_money') {
// must have prior uploaded screenshot (client uploads to /mobile-money/upload first)
if (!screenshotPath) return res.status(400).json({ error: 'Payment screenshot required for Mobile Money' });
payment_screenshot = screenshotPath;
// admin must approve -> stays pending
is_paid = 0; status = 'pending';
} else if (payment_method === 'stripe') {
// client should pay via Stripe first; webhook would confirm in real app.
// For MVP keep pending; you can manually activate via admin endpoint.
is_paid = 0; status = 'pending';
} else {
return res.status(400).json({ error: 'payment_method required for Services/Jobs' });
}
} else {
// Goods / Rentals â€” optional boosts
if (optionalBoostAllowed(category)) {
const m = Number(boosted_months) || 0; if (m < 0 || m > 12) return res.status(400).json({ error: 'boosted_months 0..12' });
}
status = 'active';
}


const requires_id = requiresID(category) ? 1 : 0;
const id_file = req.file ? `/uploads/ids/${path.basename(req.file.path)}` : null;
const r = await db.run(`INSERT INTO posts(user_id,category,title,description,price,boosted_months,is_paid,payment_method,payment_screenshot,status,requires_id,id_file)
VALUES(?,?,?,?,?,?,?,?,?,?,?,?)`,
req.user.id, category, title, description || '', Number(price_cents)||0, Number(boosted_months)||0, is_paid, payment_method||null, payment_screenshot, status, requires_id, id_file);


res.json({ id: r.lastID, status, requires_id: !!requires_id });
});


// List posts by category; Goods feed shows active first
app.get('/api/posts', async (req, res) => {
const { category } = req.query;
let rows;
if (category) rows = await db.all('SELECT * FROM posts WHERE category=? AND status="active" ORDER BY created_at DESC', category);
else rows = await db.all('SELECT * FROM posts WHERE status="active" ORDER BY created_at DESC');
res.json(rows);
});


// News posting: only limited_admin (approved) or admin
app.post('/api/news', auth(), async (req, res) => {
if (!['limited_admin', 'admin'].includes(req.user.role)) return res.status(403).json({ error: 'News requires limited_admin or admin' });
if (req.user.role === 'limited_admin' && req.user.limited_admin_status !== 'approved') return res.status(403).json({ error: 'Limited admin not approved yet' });
const { title, description } = req.body;
const r = await db.run('INSERT INTO posts(user_id,category,title,description,status) VALUES(?,?,?,?,?)', req.user.id, 'news', title, description||'', 'active');
res.json({ id: r.lastID });
});


// Simple order endpoint to demonstrate 5% commission calc
app.post('/api/orders/quote', auth(), async (req, res) => {
const { item_price_cents } = req.body;
const commission = calcCommission(Number(item_price_cents||0));
res.json({ item_price_cents: Number(item_price_cents||0), commission_cents: commission, total_cents: Number(item_price_cents||0) + commission });
});


// Admin panel: list pending payments & posts
app.get('/api/admin/pending', auth(), requireRole('admin'), async (req, res) => {
const payments = await db.all('SELECT id,title,user_id,payment_method,payment_screenshot FROM posts WHERE status="pending"');
const limitedAdmins = await db.all("SELECT id,email,limited_admin_status FROM users WHERE limited_admin_status='pending'");
res.json({ payments, limitedAdmins });
});


app.listen(PORT, () => console.log(`Sleconomicmarket running on http://localhost:${PORT}`));


app.get('/env.json', (req,res) => {
res.json({ AFRIMONEY_NUMBER: process.env.AFRIMONEY_NUMBER || '', ORANGEMONEY_NUMBER: process.env.ORANGEMONEY_NUMBER || '' });
});


PORT=4000
JWT_SECRET=super_secret_change_me
STRIPE_SECRET=
STRIPE_PUBLISHABLE=
ADMIN_EMAIL=admin@slecono
ADMIN_PASSWORD=Admin123!
AFRIMONEY_NUMBER=077472037
ORANGEMONEY_NUMBER=076321192